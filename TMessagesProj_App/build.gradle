import java.nio.file.Files
import java.nio.file.Paths

apply plugin: 'com.android.application'
apply plugin: 'com.google.firebase.crashlytics'

repositories {
    mavenCentral()
    google()
}

configurations {
    compile.exclude module: 'support-v4'
}

configurations.configureEach {
    exclude group: 'com.google.firebase', module: 'firebase-core'
    exclude group: 'androidx.recyclerview', module: 'recyclerview'
}

dependencies {
    implementation project(':TMessagesProj')
    implementation 'androidx.multidex:multidex:2.0.1'
    coreLibraryDesugaring 'com.android.tools:desugar_jdk_libs:1.1.5'
    implementation files('../TMessagesProj/libs/libgsaverification-client.aar')
}

android {
    compileSdk 36
    buildToolsVersion = '36.0.0'

    defaultConfig.applicationId = APP_PACKAGE

    sourceSets.main.jniLibs.srcDirs = ['../TMessagesProj/jni/']

    lintOptions {
        disable 'MissingTranslation'
        disable 'ExtraTranslation'
        disable 'BlockedPrivateApi'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17

        coreLibraryDesugaringEnabled true
    }

    signingConfigs {
        debug {
            storeFile file('keystore/release.keystore')
            storePassword 'cherrygram123'
            keyAlias 'cherrygram'
            keyPassword 'cherrygram123'
        }

        release {
            storeFile file('keystore/release.keystore')
            storePassword 'cherrygram123'
            keyAlias 'cherrygram'
            keyPassword 'cherrygram123'
        }
    }

    buildTypes {
        debug {
            debuggable true
            jniDebuggable true
            signingConfig signingConfigs.release
//            applicationIdSuffix ".beta"
            minifyEnabled false
            shrinkResources false
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro', '../TMessagesProj/proguard-rules-beta.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

        standalone {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
//            applicationIdSuffix ".web"
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }

        release {
            debuggable false
            jniDebuggable false
            signingConfig signingConfigs.release
            minifyEnabled true
            shrinkResources true
            multiDexEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), '../TMessagesProj/proguard-rules.pro'
            ndk.debugSymbolLevel = 'FULL'
        }
    }

    sourceSets.debug {
        manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest.xml'
    }

    sourceSets.standalone {
        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest.xml'
    }

    sourceSets.release {
        manifest.srcFile '../TMessagesProj/config/release/AndroidManifest.xml'
    }

    flavorDimensions = ["minApi"]

    productFlavors {
        bundleAfat {
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "armeabi-v7a", "arm64-v8a"/*, "x86", "x86_64"*/
            }
            ext {
                abiVersionCode = 1
            }
        }
        bundleAfat_SDK23 {
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "armeabi-v7a", "arm64-v8a"/*, "x86", "x86_64"*/
            }
            sourceSets.debug {
                manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_SDK23.xml'
            }
            minSdkVersion 23
            ext {
                abiVersionCode = 2
            }
        }
        afat {
            ndk {
                //noinspection ChromeOsAbiSupport
                abiFilters "armeabi-v7a", "arm64-v8a"/*, "x86", "x86_64"*/
            }
            sourceSets.debug {
                manifest.srcFile '../TMessagesProj/config/debug/AndroidManifest_SDK23.xml'
            }
            sourceSets.release {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_SDK23.xml'
            }
            sourceSets.standalone {
                manifest.srcFile '../TMessagesProj/config/release/AndroidManifest_standalone.xml'
            }
            ext {
                abiVersionCode = 9
            }
        }
    }

    defaultConfig.versionCode = Integer.parseInt(APP_VERSION_CODE)

    applicationVariants.configureEach { variant ->
        variant.outputs.configureEach { output ->
            def abi = output.getFilter('ABI')
            if (abi == null) abi = 'universal'
            outputFileName = "Cherrygram-PlayStore-${APP_VERSION_NAME_CHERRY}-TG-${defaultConfig.versionName}-${abi}.apk"
            output.versionCodeOverride = defaultConfig.versionCode * 10
        }
    }

    variantFilter { variant ->
        def names = variant.flavors*.name
        if (variant.buildType.name != "release" && !names.contains("afat")) {
            setIgnore(true)
        }
    }

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 34
        versionName APP_VERSION_NAME
        ndkVersion "21.4.7075529"

        multiDexEnabled true

        vectorDrawables.generatedDensities = ['mdpi', 'hdpi', 'xhdpi', 'xxhdpi']

        externalNativeBuild {
            cmake {
                version '3.10.2'
                arguments '-DANDROID_STL=c++_static', '-DANDROID_PLATFORM=android-21'
            }
        }
    }

    buildFeatures {
        buildConfig = true
    }
    namespace 'org.telegram.messenger.regular'

    lintOptions {
        checkReleaseBuilds false
    }

    bundle {
        language {
            enableSplit = false
        }
    }

    splits.abi {
        enable true
        reset()
        //noinspection ChromeOsAbiSupport
        include "arm64-v8a", "armeabi-v7a"
        universalApk true
    }
}

/** *
 *
 * CI/CD is used for copying APKs to Desktop
 *
 * **/

static def loadEnv(filePath) {
    def env = [:]
    Files.lines(Paths.get(filePath)).each { line ->
        if (line && !line.startsWith("#")) {
            def (key, value) = line.split('=', 2)
            env[key.trim()] = value?.trim()
        }
    }
    return env
}

def env = loadEnv("${project.rootDir}/secrets_for_ci.env")

env.each { key, value ->
    ext."$key" = value
}

static def isWindows() {
    def osName = System.getProperty('os.name').toLowerCase()
    return osName.contains('win')
}

static def isMacOS() {
    def osName = System.getProperty('os.name').toLowerCase()
    return osName.contains('mac')
}

static def isWindowsOrMacOS() {
    def osName = System.getProperty('os.name').toLowerCase()
    return osName.contains('win') || osName.contains('mac')
}

def desktopPath
if (isWindows()) {
    desktopPath = "C:/Users/${SYSTEM_USERNAME}/Desktop/Cherry/Stable"
} else if (isMacOS()) {
    desktopPath = "/Users/${SYSTEM_USERNAME}/Desktop/Cherry/Stable"
}

tasks.register('copyFiles', Copy) {
    from "${projectDir}/afat/release/"
    include '**/*.aab'
    into desktopPath
}

tasks.configureEach { task ->
    if (task.name == 'extractProguardFiles') {
        task.doFirst {
            delete "${projectDir}/afat/release/"
        }
    }

    if (task.name == 'bundleAfatRelease') {
        if (isWindowsOrMacOS()) {
            task.finalizedBy 'copyFiles'
        }
    }
}

apply plugin: 'com.google.gms.google-services'
